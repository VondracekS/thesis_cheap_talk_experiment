glmer(data = ., formula = pareto ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id),
family="binomial") -> logistic_pareto_wo_treatment
install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment)
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate} ({std.error}){stars}")
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% moselsummary()
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% modelsummary
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% modelsummary()
# lrtest
summary(lrtest(logistic_pareto, logistic_pareto_wo_treatment))
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment)
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment) ->lr_pareto
tibble(lr_pareto)
library(xtable)
xtable(tibble(lr_pareto))
exp(0.437)
2.54/1.54
1.54/2.54
# logit
df_simulation %>%
lmer(data = ., formula = pareto ~ 1 + (1|id)) -> baseline_costs
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> costs
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id)) -> costs_wo_treatment
# lrtest
lrtest(costs, costs_wo_treatment)
modelsummary(list("Baseline Model"=baseline_costs,"Full Model"=costs,
"Restrained Model"=costs_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
# logit
df_simulation %>%
lmer(data = ., formula = payoff ~ 1 + (1|id)) -> baseline_payoff
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id)) -> payoff_wo_treatment
# lrtest
lrtest(costs, costs_wo_treatment)
# lrtest
lrtest(payoff, payoff_wo_treatment)
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate} ({std.error}){stars}")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}", ootput="latex")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
# lrtest
tibble(lrtest(payoff, payoff_wo_treatment))
# lrtest
xtable(tibble(lrtest(payoff, payoff_wo_treatment)))
df_simulation %>%
glmer(data = ., formula = payoff ~ 1 + (1|id))
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
df_simulation %>%
glmer(data = ., formula = payoff ~ 1 + (1|id))
cor(df_simulation$cost, df_simulation$prediction)
cor(df_simulation$cost, df_simulation$p_choices)
df_actions <- read.csv("data/data_processed/df_compliant_actions.csv")
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id))
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial')
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') %>% summary()
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') -> model_actions
summary(model_actions)
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') -> model_actions_full
df_actions %>%
glmer(data = .,
formula = value ~ 1 + (1|id),
family='binomial') -> model_actions_baseline
df_actions %>%
glmer(data = .,
formula = value ~ cost + as.factor(variable) + (1|id),
family='binomial') -> model_actions_constrained
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}", output="latex")
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}")
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}")
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
library(car)
library(lfe)
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
cost ~ action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
action_type ~ cost,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
model_actions_cm_full
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
library(car)
library(lfe)
# load the experiment data
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
# load info about participants
read.csv("data/data_processed/data_info.csv") %>% select(-"X") -> df_info
# join the two data frames
df_info %>% inner_join(df_simulation) -> df_simulation
# create the dags:
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action + prediction,
action ~ id,
prediction ~ id,
correct ~ id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# SImulation models
# logit
df_simulation %>%
glmer(data = ., formula = pareto ~ 1 + (1|id), family='binomial') -> baseline_pareto
df_simulation %>%
glmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost + opp +  correct +
p_choices + econ_study + (1|id),
family="binomial") -> logistic_pareto
df_simulation %>%
glmer(data = ., formula = pareto ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id),
family="binomial") -> logistic_pareto_wo_treatment#
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment)
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
# logit
df_simulation %>%
glmer(data = ., formula = payoff ~ 1 + (1|id)) -> baseline_payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id)) -> payoff_wo_treatment
# lrtest
xtable(tibble(lrtest(payoff, payoff_wo_treatment)))
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
experiment_simulation %>%
group_by(treatment )%>% summarise(mean = mean(payoff)) %>% xtable(.)
# Actions analysis
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
df_actions <- read.csv("data/data_processed/df_compliant_actions.csv")
df_actions <- df_actions %>% inner_join(df_info)
df_actions %>%
filter(variable %in% c("p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_actions_cm_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_actions_ca_full
df_actions %>%
filter(variable %in% c("prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_pred_cm_full
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_pred_ca_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study,
family='binomial') -> model_action_ca_cm
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study,
family='binomial') -> model_pred_ca_cm
modelsummary(models=list("Action A"=model_actions_ca_full,
"Action B" = model_actions_cm_full,
"Action A vs Action B" = model_action_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC", output="latex")
modelsummary(models=list("Prediction A" = model_pred_ca_full,
"Prediction B" = model_pred_cm_full,
"Prediction  A vs B" = model_pred_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC",
output="latex")
qqnorm(resid(model_pred_ca_full))
# Non lmer models
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices_cm", "p_choices")) %>%
glmer(data = .,
formula = value ~ cost + as.factor(variable) + (1|id),
family='binomial') -> model_actions_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices_cm", "p_choices")) %>%
glmer(data = .,
formula = value ~ 1 + (1|id),
family='binomial') -> model_actions_base
modelsummary(model_a)
summary(model_actions)
linearHypothesis(model_actions, "as.factor(variable)p_choices_cm - as.factor(variable)p_choices_ca = 0")
modelsummary(list("model_action"=model_actions_diff, "model_pred"=model_pred_diff),
estimate = "{estimate}{stars}")
modelsummary()
qqnorm(resid(model_pred_diff))
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study + as.factor(id),
family='binomial') %>% summary()
df_actions %>%
filter(variable %in% c("p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study + as.factor(id),
family='binomial') -> model_actions_cm_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study + as.factor(id),
family='binomial') -> model_actions_ca_full
df_actions %>%
filter(variable %in% c("prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study + as.factor(id),
family='binomial') -> model_pred_cm_full
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study + as.factor(id),
family='binomial') -> model_pred_ca_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study + as.factor(id),
family='binomial') -> model_action_ca_cm
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study + as.factor(id),
family='binomial') -> model_pred_ca_cm
modelsummary(models=list("Action A"=model_actions_ca_full,
"Action B" = model_actions_cm_full,
"Action A vs Action B" = model_action_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC")
modelsummary(models=list("Prediction A" = model_pred_ca_full,
"Prediction B" = model_pred_cm_full,
"Prediction  A vs B" = model_pred_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC")
df_actions %>%
filter(variable %in% c("p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_actions_cm_full
df_actions %>%
filter(variable %in% c("p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study + as.factor(id),
family='binomial') -> model_actions_cm_full_id
modelsummary(models=list(model_actions_cm_full, model_actions_cm_full_id))
modelsummary(models=list("Prediction A" = model_pred_ca_full,
"Prediction B" = model_pred_cm_full,
"Prediction  A vs B" = model_pred_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC")
df_actions %>%
filter(variable %in% c("p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_actions_cm_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_actions_ca_full
df_actions %>%
filter(variable %in% c("prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_pred_cm_full
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction")) %>%
glm(data = .,
formula = value ~ cost + treatment + male + age + econ_study,
family='binomial') -> model_pred_ca_full
df_actions %>%
filter(variable %in% c("p_choices_ca", "p_choices_cm", "p_choices")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study,
family='binomial') -> model_action_ca_cm
df_actions %>%
filter(variable %in% c("prediction_ca", "prediction_cm", "prediction")) %>%
glm(data = .,
formula = value ~ cost + as.factor(variable) + male + age + econ_study,
family='binomial') -> model_pred_ca_cm
modelsummary(models=list("Action A"=model_actions_ca_full,
"Action B" = model_actions_cm_full,
"Action A vs Action B" = model_action_ca_cm),
estimate = "{estimate}{stars}",
vcov = "HC")
linearHypothesis(model_actions, "as.factor(variable)p_choices_cm - as.factor(variable)p_choices_ca = 0")
linearHypothesis(model_actions, "as.factor(variable)p_choices_cm = as.factor(variable)p_choices_ca")
tibble(linearHypothesis(model_actions, "as.factor(variable)p_choices_cm = as.factor(variable)p_choices_ca"))
xtable(tibble(linearHypothesis(model_actions, "as.factor(variable)p_choices_cm = as.factor(variable)p_choices_ca")))
linearHypothesis(model_actions, "as.factor(variable)p_choices_cm = as.factor(variable)p_choices_ca")
linearHypothesis(model_pred_ca_cm, "as.factor(variable)prediction_cm = as.factor(variable)prediction_ca")
xtable(linearHypothesis(model_pred_ca_cm, "as.factor(variable)prediction_cm = as.factor(variable)prediction_ca"))
summary(model_actions)
summary(df_actions)
df_actions
df_info
df_info %>% inner_join(df_simulation)
df_info %>% inner_join(df_actions)
df_info %>% inner_join(df_actions) %>% datasummary_skim()
df_info %>% inner_join(df_actions) %>% datasummary_skim(.) %>% kableExtra::kable_paper("hover", full_width=TRUE)
install.packages("cairo")
install.packages("Cairo")
df_info %>% inner_join(df_actions) %>% datasummary_skim(.) %>% kableExtra::kable_paper("hover", full_width=TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(kableExtra)
library(haven)
library(modelsummary)
datasummary_skim(df_info)
update.packages(ask = FALSE, checkBuilt = TRUE)
View(df_info)
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
library(car)
library(lfe)
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
library(kableExtra)
datasummary_skim(df_simulation)
