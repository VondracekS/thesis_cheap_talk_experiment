experiment_simulation
install.packages("daggity")
install.packages("dagitty")
install.packages("ggdag")
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
read.csv(
"../data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
read.csv("../data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
read.csv("../data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
read.csv("../data/data_processed/gameplay_full_compliant.csv") %>%
select(-"X") -> df_simulation
read.csv("../data/data_processed/gameplay_full_compliant.csv") %>%
select(-"X") -> df_simulation
read.csv("../data/data_processed/gameplay_full_compliant.csv") %>%
select(-"X") -> df_simulation
getcwd()
getwd()
read.csv("./data/data_processed/gameplay_full_compliant.csv") %>%
select(-"X") -> df_simulation
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
View(experiment_simulation)
read.csv("data/data_processed/data_info.csv") -> df_info
df_info %>% inner_join(df_simulation)
read.csv("data/data_processed/data_info.csv") %>% select(-"X") -> df_info
df_info %>% inner_join(df_simulation)
# merge the two data frames
df_info %>% merge(df_dimulation) -> df_simulation
# merge the two data frames
df_info %>% merge(df_simulation) -> df_simulation
# merge the two data frames
df_info %>% inner_join(df_simulation) -> df_simulation
# load the experiment data
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
# load info about participants
read.csv("data/data_processed/data_info.csv") %>% select(-"X") -> df_info
# merge the two data frames
df_info %>% inner_join(df_simulation) -> df_simulation
# create the dags:
dag_payoff <- dagify(pareto ~ treatment + cost + opponent_cost + gender +
econ_student + id + age + correct + prediction + p_choices,
p_hcoices ~ id,
prediction ~ id,
correct~id,
exposure = "treatment",
outcome = "pareto")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend,
edge_linetype = linetype, color = nodecolor)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag() + theme(legend.position = "none") +
xlim(-0.5, 2.5) + ylim(-1.5, 2.5)
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag() + theme(legend.position = "none") +
xlim(-0.5, 2.5) + ylim(-1.5, 2.5)
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(pareto ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action,
p_hcoices ~ id,
prediction ~ id,
correct~id,
exposure = "treatment",
outcome = "pareto")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag()
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(pareto ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action,
p_hcoices ~ id,
prediction ~ id,
correct~id,
exposure = "treatment",
outcome = "pareto")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point() +
geom_dag_edges() +
geom_dag_text(col = "white", size = 3) +
scale_color_grey() +
theme_dag()
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
# load the experiment data
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
# load info about participants
read.csv("data/data_processed/data_info.csv") %>% select(-"X") -> df_info
# join the two data frames
df_info %>% inner_join(df_simulation) -> df_simulation
# create the dags:
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action,
p_hcoices ~ id,
prediction ~ id,
correct~id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=35, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.5) +
scale_color_grey() +
theme_dag()
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
# load the experiment data
read.csv("./data/data_processed/gameplay_full_cmpliant.csv") %>%
select(-"X") -> df_simulation
# load info about participants
read.csv("data/data_processed/data_info.csv") %>% select(-"X") -> df_info
# join the two data frames
df_info %>% inner_join(df_simulation) -> df_simulation
# create the dags:
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action,
p_hcoices ~ id,
prediction ~ id,
correct~id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.5) +
scale_color_grey() +
theme_dag()
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.7) +
scale_color_grey() +
theme_dag()
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action,
action ~ id,
prediction ~ id,
correct ~ id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action + prediction,
action ~ id,
prediction ~ id,
correct ~ id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action + prediction,
action ~ id,
prediction ~ id,
correct ~ id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
dag_payoff <- dagify(TARGET ~ treatment + cost + opp_cost + gender +
econ + id + age + correct + pred + action + prediction,
action ~ id,
prediction ~ id,
correct ~ id,
exposure = "treatment",
outcome = "TARGET")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
View(df_simulation)
col(experiment_simulation)
colnames(experiment_simulation)
colnames(df_simulation)
# logit
df_simulation %>%
glmer(data = ., formula = pareto ~ 1 + (1|id), family='binomial') -> baseline_pareto
df_simulation %>%
glmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost + opp +  correct +
p_choices + econ_study + (1|id),
family="binomial") -> logistic_pareto
modelsummary(list(baseline_pareto, logistic_pareto))
library(modelsummary)
modelsummary(list(baseline_pareto, logistic_pareto))
modelsummary(list("a"=baseline_pareto,"b"=logistic_pareto))
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto))
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto),
estimate = "{estimate} ({std.error}){stars}")
df_simulation %>%
glmer(data = ., formula = pareto ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id),
family="binomial") -> logistic_pareto_wo_treatment
install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment)
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate} ({std.error}){stars}")
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% moselsummary()
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% modelsummary
# lrtest
(lrtest(logistic_pareto, logistic_pareto_wo_treatment)) %>% modelsummary()
# lrtest
summary(lrtest(logistic_pareto, logistic_pareto_wo_treatment))
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment)
# lrtest
lrtest(logistic_pareto, logistic_pareto_wo_treatment) ->lr_pareto
tibble(lr_pareto)
library(xtable)
xtable(tibble(lr_pareto))
exp(0.437)
2.54/1.54
1.54/2.54
# logit
df_simulation %>%
lmer(data = ., formula = pareto ~ 1 + (1|id)) -> baseline_costs
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> costs
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id)) -> costs_wo_treatment
# lrtest
lrtest(costs, costs_wo_treatment)
modelsummary(list("Baseline Model"=baseline_costs,"Full Model"=costs,
"Restrained Model"=costs_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
# logit
df_simulation %>%
lmer(data = ., formula = payoff ~ 1 + (1|id)) -> baseline_payoff
df_simulation %>%
lmer(data = ., formula = pareto ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + treatment + cost +
opp +  correct + p_choices + econ_study + (1|id)) -> payoff
df_simulation %>%
lmer(data = ., formula = payoff ~ male + age + econ_study + cost + opp +  correct +
p_choices + econ_study + (1|id)) -> payoff_wo_treatment
# lrtest
lrtest(costs, costs_wo_treatment)
# lrtest
lrtest(payoff, payoff_wo_treatment)
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate} ({std.error}){stars}", output="latex")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate} ({std.error}){stars}")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}", ootput="latex")
modelsummary(list("Baseline Model"=baseline_payoff,"Full Model"=payoff,
"Restrained Model"=payoff_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
modelsummary(list("Baseline Model"=baseline_pareto,"Full Model"=logistic_pareto,
"Restrained Model"=logistic_pareto_wo_treatment),
estimate = "{estimate}{stars}", output="latex")
# lrtest
tibble(lrtest(payoff, payoff_wo_treatment))
# lrtest
xtable(tibble(lrtest(payoff, payoff_wo_treatment)))
df_simulation %>%
glmer(data = ., formula = payoff ~ 1 + (1|id))
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
df_simulation %>%
glmer(data = ., formula = payoff ~ 1 + (1|id))
cor(df_simulation$cost, df_simulation$prediction)
cor(df_simulation$cost, df_simulation$p_choices)
df_actions <- read.csv("data/data_processed/df_compliant_actions.csv")
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id))
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial')
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') %>% summary()
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') -> model_actions
summary(model_actions)
df_actions %>%
glmer(data = .,
formula = value ~ cost + treatment + as.factor(variable) + (1|id),
family='binomial') -> model_actions_full
df_actions %>%
glmer(data = .,
formula = value ~ 1 + (1|id),
family='binomial') -> model_actions_baseline
df_actions %>%
glmer(data = .,
formula = value ~ cost + as.factor(variable) + (1|id),
family='binomial') -> model_actions_constrained
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}", output="latex")
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}")
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
modelsummary(list("Baseline Model"=model_actions_baseline,"Full Model"=model_actions_full,
"Constrained Model"=model_actions_constrained),
estimate = "{estimate}{stars}")
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
# Simulation evaluation
# libraries
library(lme4)
library(flexplot)
library(dplyr)
library(ggplot2)
library(dagitty)
library(ggdag)
library(ggplot2)
library(modelsummary)
library(lmtest)
library(xtable)
library(car)
library(lfe)
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
cost ~ action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
action_type ~ cost,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + pred + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
# create the dags:
dag_payoff <- dagify(prob_B ~  cost + gender + econ + age + action_type,
exposure = "action_type",
outcome = "prob_B")
dag_payoff %>%
tidy_dagitty() %>%
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_dag_point(size=30, colour='DarkBlue') +
geom_dag_edges() +
geom_dag_text(col = "white", size = 2.9) +
scale_color_grey() +
theme_dag()
